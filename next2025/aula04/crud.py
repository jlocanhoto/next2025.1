"""Objetivo:

Entender como fazer rotas do tipo CRUD, visualizando no /docs o efeito das alterações feitas
em código, aplicando os parâmetros do FastAPI (path, description, response_model, status_code).

CRUD Routes
-----------

GET     /items      Returns the entire array *
GET     /items/:id  Returns an object by its id property
POST    /items      Inserts a new object in the array (autogenerated if not provided)
PUT     /items      Replaces the whole data bucket content
PUT     /items/:id  Performs a full object update by its id (replace)
DELETE  /items      Deletes the data bucket content
DELETE  /items/:id  Deletes an object by its id
PATCH   /items      Concatenates the arrays
PATCH   /items/:id  Performs a partial object update by its id (merge)."""

from uuid import uuid4
from enum import StrEnum

from fastapi import APIRouter, HTTPException, status
from pydantic import BaseModel

router = APIRouter()


class SortOptions(StrEnum):
    ASC = "asc"
    DESC = "desc"


class ItemFields(StrEnum):
    NAME = "name"
    PRICE = "price"


class Item(BaseModel):
    id: str
    name: str
    price: float


class ItemRequest(BaseModel):
    name: str
    price: float


items_db: dict[str, Item] = {}

# items_db = {
#     "1234": {"id": "1234", "name": "lapis", "price": 5.10},
#     "7895": {"id": "7895", "name": "caneta", "price": 2.5},
# }


def _check_item_exists(item_id: str) -> None:
    if item_id not in items_db:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Item not found!",
        )


# GET     /items      Returns the entire array *
@router.get("/items")
async def get_all_items(
    skip: int = 0,
    limit: int | None = None,
    sort: SortOptions = SortOptions.ASC,
    sortby: ItemFields = ItemFields.NAME,
) -> list[Item]:
    all_items = list(items_db.values())
    end = skip + limit if limit is not None else len(all_items)
    reverse = sort == SortOptions.DESC

    items = all_items[skip:end]
    sorted_items = sorted(
        items,
        key=lambda item: item.model_dump()[sortby.value],
        reverse=reverse,
    )

    return sorted_items


# GET     /items/:id  Returns an object by its id property
@router.get("/items/{item_id}")
async def get_item(item_id: str) -> Item:
    _check_item_exists(item_id)
    return items_db[item_id]


# POST    /items      Inserts a new object in the array
@router.post("/items", status_code=status.HTTP_201_CREATED)
async def add_item(item: ItemRequest) -> Item:
    new_item = Item(
        id=str(uuid4()),
        name=item.name,
        price=item.price,
    )

    items_db[new_item.id] = new_item

    return new_item


# PUT     /items/:id  Performs a full object update by its id (replace)
@router.put("/items/{item_id}")
async def update_item(item_id: str, item: ItemRequest) -> Item:
    _check_item_exists(item_id)
    new_item = Item(id=item_id, name=item.name, price=item.price)
    items_db[item_id] = new_item
    return new_item


# DELETE  /items/:id  Deletes an object by its id
@router.delete("/items/{item_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_item(item_id: str) -> None:
    _check_item_exists(item_id)
    del items_db[item_id]
